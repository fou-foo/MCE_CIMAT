nivel <- sqrt(((p*(n-1)/(n*(n-p))))*(qf(1-alpha, df1 = p, df2=n-p)))
errores <- nivel*sqrt(t(a)%*%S%*%a)
#errores <- nivel*sqrt(ss) #es importante el orden
inf.intervalos <- media - errores
sup.intervalos <- media + errores
intervalos <- as.data.frame(cbind(inf.intervalos,media, sup.intervalos))
colnames(intervalos) <- paste0(c('lim.inferior.T2intervalo.media.al',
'media.muestral',
'lim.superior.T2intervalo.media.al'),
c(as.character(1-alpha), '',as.character(1-alpha)  ))
#row.names(intervalos) <- colnames(data)
return(intervalos)
}
media <- matrix(apply(osos, 2, mean), ncol = 1)
n <- dim(osos)[1]
p <- dim(osos)[2]
a <- matrix(c(1,0,0,0), ncol=1 )
media1 <- t(a)%*%media
intervalos.osos1 <- T2.intervalos(S=cov(osos), media= media1, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,1,0,0), ncol=1 )
media2 <- t(a)%*%media
media2 <- t(a)%*%media
intervalos.osos2 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,1,0), ncol=1 )
media3 <- t(a)%*%media
intervalos.osos3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,0,1), ncol=1 )
media4 <- t(a)%*%media
intervalos.osos4 <- T2.intervalos(S=cov(osos), media= media4, alpha=0.05,
a = a, n=n, p=p)
intervalos.osos <- rbind(intervalos.osos1,intervalos.osos2, intervalos.osos3,
intervalos.osos4)
library(xtable)
xtable(intervalos.osos)
a <- matrix(c(0,0,-1,1), ncol = 1 )
a <- matrix(c(0,0,-1,1), ncol = 1 )
media1 <- t(a)%*%media
a <- matrix(c(0,0,-1,1), ncol = 1 )
media1 <- t(a)%*%media
intervalos.incremento.osos.4a5 <- T2.intervalos(S=cov(osos), media= media1, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,-1,1,0), ncol = 1 )
a <- matrix(c(0,-1,1,0), ncol = 1 )
media2 <- t(a)%*%media
a <- matrix(c(0,-1,1,0), ncol = 1 )
media2 <- t(a)%*%media
intervalos.incremento.osos.3a4 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(-1,1,0,0), ncol = 1 )
a <- matrix(c(-1,1,0,0), ncol = 1 )
media3 <- t(a)%*%media
a <- matrix(c(-1,1,0,0), ncol = 1 )
media3 <- t(a)%*%media
intervalos.incremento.osos.2a3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
incrementos <- rbind(intervalos.incremento.osos.2a3, intervalos.incremento.osos.3a4,
intervalos.incremento.osos.4a5)
row.names(incrementos) <- c('incremento.osos.2a3', 'incremento.osos.3a4',
'incremento.osos.4a5')
xtable(incrementos)
a <-t(matrix(c(-1,1,0,0, 0,0,-1,1), ncol = 4, byrow = TRUE ))
a
as.matrix(osos)
as.matrix(osos)%*%a
incrementos.osos <-  as.matrix(osos)%*%a
incrementos.osos <- as.data.frame(incrementos.osos)
colnames(incrementos.osos) <- c('incremento.2a3', 'incremento.4a5')
S%*%a
S_z <- t(a)S%*%a
S_z <- t(a)%*%S%*%a
S_z
S_z
a
media
media_z <- t(a)%*%media
media_z
dibuja.elipse(S=S_z, alpha=0.05, n=dim(osos)[1], p=dim(osos)[2],
media=media_z)
a <- t(matrix(c(-1,1,0,0, 0,0,-1,1), ncol = 4, byrow = TRUE ))
incrementos.osos <-  as.matrix(osos)%*%a
colnames(incrementos.osos) <- c('incremento.2a3', 'incremento.4a5')
S_z <- t(a)%*%S%*%a
media.z <- apply(incrementos.osos, 2, mean)
media.z
media.z <- matrix(apply(incrementos.osos, 2, mean))
media.z
dibuja.elipse(S=S_z, alpha=0.05, n=dim(osos)[1], p=dim(osos)[2],
media=media.z)
range(radiacion.sqrt[,1])
T.hotelling <- function(data, alpha)
{
#data (data.frame): Conjunto de datos cuyas observaciones son una m.a con distribucion
#                   normal multivariada
#alpha (numeric): Nivel de significancia requerido
n <- dim(data)[1]
p <- dim(data)[2]
T.hotelling.escalar <- ((p*(n-1)) / (n-p))*qf(1-alpha, df1=p, df2=n-p)
return(T.hotelling.escalar)
}
T.hotelling.muestral <- function(data, mu)
{
#data (data.frame): Conjunto de datos cuyas observaciones son una m.a con distribucion
#                   normal multivariada
# mu (vector numeric): vector columna de dimension p con la media a testear
n <- dim(data)[1]
p <- dim(data)[2]
medias <- matrix(apply(data, 2, mean), byrow = TRUE, ncol = 1)
S <- cov(data)
T.muestral <- n*t(medias-mu)%*%solve(S)%*%(medias-mu)
return(T.muestral)
}
T2.intervalos <- function(S,media, alpha, a, n, p)
{
#alpha (numeric): nivel de signiificancia
#n (numeric): numero de observaciones
#p (numeric): numero de variables
#media (vector): vector-columna de medias
#S (matrix): matriz de covarianzas
nivel <- sqrt(((p*(n-1)/(n*(n-p))))*(qf(1-alpha, df1 = p, df2=n-p)))
errores <- nivel*sqrt(t(a)%*%S%*%a)
#errores <- nivel*sqrt(ss) #es importante el orden
inf.intervalos <- media - errores
sup.intervalos <- media + errores
intervalos <- as.data.frame(cbind(inf.intervalos,media, sup.intervalos))
colnames(intervalos) <- paste0(c('lim.inferior.T2intervalo.media.al',
'media.muestral',
'lim.superior.T2intervalo.media.al'),
c(as.character(1-alpha), '',as.character(1-alpha)  ))
#row.names(intervalos) <- colnames(data)
return(intervalos)
}
osos <- read.csv('datos_osos.csv')
colnames(osos) <- paste0(rep("Longitud", 4), 2:5)
apply(osos, 2, shapiro.test)
media <- matrix(apply(osos, 2, mean), ncol = 1)
n <- dim(osos)[1]
p <- dim(osos)[2]
a <- matrix(c(1,0,0,0), ncol=1 )
media1 <- t(a)%*%media
intervalos.osos1 <- T2.intervalos(S=cov(osos), media= media1, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,1,0,0), ncol=1 )
media2 <- t(a)%*%media
intervalos.osos2 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,1,0), ncol=1 )
media3 <- t(a)%*%media
intervalos.osos3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,0,1), ncol=1 )
media4 <- t(a)%*%media
intervalos.osos4 <- T2.intervalos(S=cov(osos), media= media4, alpha=0.05,
a = a, n=n, p=p)
intervalos.osos <- rbind(intervalos.osos1,intervalos.osos2, intervalos.osos3,
intervalos.osos4)
#library(xtable)
#xtable(intervalos.osos)
a <- matrix(c(0,0,-1,1), ncol = 1 )
media1 <- t(a)%*%media
intervalos.incremento.osos.4a5 <- T2.intervalos(S=cov(osos), media= media1, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,-1,1,0), ncol = 1 )
media2 <- t(a)%*%media
intervalos.incremento.osos.3a4 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(-1,1,0,0), ncol = 1 )
media3 <- t(a)%*%media
intervalos.incremento.osos.2a3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
incrementos <- rbind(intervalos.incremento.osos.2a3, intervalos.incremento.osos.3a4,
intervalos.incremento.osos.4a5)
row.names(incrementos) <- c('incremento.osos.2a3', 'incremento.osos.3a4',
'incremento.osos.4a5')
#xtable(incrementos)
a <- t(matrix(c(-1,1,0,0, 0,0,-1,1), ncol = 4, byrow = TRUE ))
incrementos.osos <-  as.matrix(osos)%*%a
incrementos.osos <- as.data.frame(incrementos.osos)
colnames(incrementos.osos) <- c('incremento.2a3', 'incremento.4a5')
S_z <- t(a)%*%S%*%a
cov(osos)
a
cov(osos)%*%a
t(a)%*%cov(osos)%*%a
S_z <- t(a)%*%cov(osos)%*%a
media.z <- matrix(apply(incrementos.osos, 2, mean))
dibuja.elipse(S=S_z, alpha=0.05, n=dim(osos)[1], p=dim(osos)[2],
media=media.z, xlim=c(-25,45), ylim=c(-15,25))
knitr::opts_chunk$set(echo = TRUE, cache =TRUE)
setwd('C:\\Users\\fou-f\\Desktop\\MCE\\Second\\EstadisticaMultivariada\\Tarea4')
radiacion <- read.csv('datos_radiacion.csv')
colnames(radiacion) <- c('Puerta.cerrada', 'Puerta.abierta') #cambio de nombres de columnas
#para agilizar el tipeo de codigo
radiacion.sqrt <-apply(radiacion, 2, function(x){ x**(1/4) }) #realizo la transformaciÃ³n
radiacion.sqrt <- as.data.frame(radiacion.sqrt)
shapiro.test(radiacion.sqrt$Puerta.cerrada)
shapiro.test(radiacion.sqrt$Puerta.abierta)
ks.test(radiacion.sqrt$Puerta.abierta, "pnorm", mean(radiacion.sqrt$Puerta.abierta),
sd(radiacion.sqrt$Puerta.abierta ))
alpha <- 1-.95
p <- dim(radiacion.sqrt)[2]
n <- dim(radiacion.sqrt)[1]
#se calcula la media y la matriz de covarianza
media <- apply(radiacion.sqrt, 2, mean)
(media <- matrix(media, ncol = 1))
S <- cov(radiacion.sqrt)
(solve(S))
mu <- matrix(c(.562,.589), byrow = TRUE, ncol = 1)
(nivel <- qf(1-alpha, df1=p, df2=n-p)*(p*(n-1)/(n-p)))
(T.hotelling <- n*t(media-mu)%*%solve(S)%*%(media-mu))
dibuja.elipse <- function(alpha, n, p, media, S, xlim, ylim)
{
#alpha (numeric): nivel de signiificancia
#n (numeric): numero de observaciones
#p (numeric): numero de variables
#media (vector): vector-columna de medias
#S (matrix): matriz de covarianzas
ejes <- eigen(S)
eje_x <- ejes$vectors[,1]
eje_y <- ejes$vectors[,2]
nivel <- qf(1-alpha, df1 = p, df2 = n-p ) #cuantil de la distribucion f con confianza 1-alpha
c <- ((p*(n-1))/(n*(n-p)) )*nivel #cuantil de la T de Hotelling
longitud_x <- ejes$values[1]**.5*( c)**.5 #formulas vistas en clase
longitud_y <- ejes$values[2]**.5*( c)**.5 #formulas vistas en clase
#se dibujan los ejes
g <- 100 #numero de puntos a dibujar, primero los genero centrados en el origen y
#luego roto y translado
x <- seq(-longitud_x, longitud_x, length=g)
y <- seq(-longitud_y, longitud_y, length=g)
ejes.puntos <- matrix(c(x, rep(0,g )), byrow = TRUE, nrow = 2)
ejes.puntos <- (ejes$vectors)%*%ejes.puntos + matrix(rep(media, g), nrow = 2)
plot(ejes.puntos[1,], ejes.puntos[2,], type='l', col='orange',
main='Elipse de 95% confianza para la media',
xlab=colnames(S)[1], ylab = colnames(S)[2], xlim=xlim, ylim=ylim)
ejes.puntos <- matrix(c(rep(0,g ), y), byrow = TRUE, nrow = 2)
ejes.puntos <- (ejes$vectors)%*%ejes.puntos + matrix(rep(media, g), nrow = 2)
points(ejes.puntos[1,], ejes.puntos[2,], type='l', col='orange')
#se genera el perimetro, primero centrado y luego se rota y translada
y <- ((c-x**2/ejes$values[1])*ejes$values[2])**.5 #funcion inversa de elipse con
#centro en elorigen
elipse.puntos <- matrix(c(x,y), ncol = g, byrow = TRUE)
elipse.puntos <- ejes$vectors%*%(elipse.puntos) + matrix(rep(media, g), nrow = 2)
points(elipse.puntos[1,], elipse.puntos[2,], col='purple', type='l')
y <- -((c-x**2/ejes$values[1])*ejes$values[2])**.5
elipse.puntos <- matrix(c(x,y), ncol = g, byrow = TRUE)
elipse.puntos <- ejes$vectors%*%(elipse.puntos) + matrix(rep(media, g), nrow = 2)
points(elipse.puntos[1,], elipse.puntos[2,], col='purple', type='l')
}
dibuja.elipse(S=cov(radiacion.sqrt), alpha=alpha, n = dim(radiacion.sqrt)[1],
p=dim(radiacion.sqrt)[2],
media=matrix(apply(radiacion.sqrt,2, mean), ncol = 1),
xlim=range(radiacion.sqrt[,1]), ylim=range(radiacion.sqrt[,2]))
points(radiacion.sqrt[,1], radiacion.sqrt[,2], col='gray', pch=20)
points(c(mu[1],.55),c(mu[2],.6), col=c('green','red'), pch=20)
mu <- matrix(c(.55,.6), byrow = TRUE, ncol = 1)
(nivel <- qf(1-alpha, df1=p, df2=n-p)*(p*(n-1)/(n-p)))
(T.hotelling <- n*t(media-mu)%*%solve(S)%*%(media-mu))
mu <- matrix(c(.55,.6), byrow = TRUE, ncol = 1)
(a <- solve(S)%*%(media-mu))
z <- t(a)%*%t(as.matrix(radiacion.sqrt))
media.z <- mean(z)
(t2 <- n*(media.z-t(a)%*%mu)^2/var(t(z)))
T.hotelling <- function(data, alpha)
{
#data (data.frame): Conjunto de datos cuyas observaciones son una m.a con distribucion
#                   normal multivariada
#alpha (numeric): Nivel de significancia requerido
n <- dim(data)[1]
p <- dim(data)[2]
T.hotelling.escalar <- ((p*(n-1)) / (n-p))*qf(1-alpha, df1=p, df2=n-p)
return(T.hotelling.escalar)
}
T.hotelling.muestral <- function(data, mu)
{
#data (data.frame): Conjunto de datos cuyas observaciones son una m.a con distribucion
#                   normal multivariada
# mu (vector numeric): vector columna de dimension p con la media a testear
n <- dim(data)[1]
p <- dim(data)[2]
medias <- matrix(apply(data, 2, mean), byrow = TRUE, ncol = 1)
S <- cov(data)
T.muestral <- n*t(medias-mu)%*%solve(S)%*%(medias-mu)
return(T.muestral)
}
T2.intervalos <- function(S,media, alpha, a, n, p)
{
#alpha (numeric): nivel de signiificancia
#n (numeric): numero de observaciones
#p (numeric): numero de variables
#media (vector): vector-columna de medias
#S (matrix): matriz de covarianzas
nivel <- sqrt(((p*(n-1)/(n*(n-p))))*(qf(1-alpha, df1 = p, df2=n-p)))
errores <- nivel*sqrt(t(a)%*%S%*%a)
#errores <- nivel*sqrt(ss) #es importante el orden
inf.intervalos <- media - errores
sup.intervalos <- media + errores
intervalos <- as.data.frame(cbind(inf.intervalos,media, sup.intervalos))
colnames(intervalos) <- paste0(c('lim.inferior.T2intervalo.media.al',
'media.muestral',
'lim.superior.T2intervalo.media.al'),
c(as.character(1-alpha), '',as.character(1-alpha)  ))
#row.names(intervalos) <- colnames(data)
return(intervalos)
}
osos <- read.csv('datos_osos.csv')
colnames(osos) <- paste0(rep("Longitud", 4), 2:5)
apply(osos, 2, shapiro.test)
media <- matrix(apply(osos, 2, mean), ncol = 1)
n <- dim(osos)[1]
p <- dim(osos)[2]
a <- matrix(c(1,0,0,0), ncol=1 )
media1 <- t(a)%*%media
a <- matrix(c(0,1,0,0), ncol=1 )
media2 <- t(a)%*%media
intervalos.osos2 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,1,0), ncol=1 )
media3 <- t(a)%*%media
intervalos.osos3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,0,1), ncol=1 )
media4 <- t(a)%*%media
intervalos.osos4 <- T2.intervalos(S=cov(osos), media= media4, alpha=0.05,
a = a, n=n, p=p)
intervalos.osos <- rbind(intervalos.osos1,intervalos.osos2, intervalos.osos3,
intervalos.osos4)
media <- matrix(apply(osos, 2, mean), ncol = 1)
n <- dim(osos)[1]
p <- dim(osos)[2]
a <- matrix(c(1,0,0,0), ncol=1 )
media1 <- t(a)%*%media
intervalos.osos1 <- T2.intervalos(S=cov(osos), media= media1, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,1,0,0), ncol=1 )
media2 <- t(a)%*%media
intervalos.osos2 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,1,0), ncol=1 )
media3 <- t(a)%*%media
intervalos.osos3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,0,0,1), ncol=1 )
media4 <- t(a)%*%media
intervalos.osos4 <- T2.intervalos(S=cov(osos), media= media4, alpha=0.05,
a = a, n=n, p=p)
intervalos.osos <- rbind(intervalos.osos1,intervalos.osos2, intervalos.osos3,
intervalos.osos4)
library(xtable)
xtable(intervalos.osos)
a <- matrix(c(0,0,-1,1), ncol = 1 )
media1 <- t(a)%*%media
intervalos.incremento.osos.4a5 <- T2.intervalos(S=cov(osos), media= media1, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(0,-1,1,0), ncol = 1 )
media2 <- t(a)%*%media
intervalos.incremento.osos.3a4 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(-1,1,0,0), ncol = 1 )
media3 <- t(a)%*%media
intervalos.incremento.osos.2a3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
incrementos <- rbind(intervalos.incremento.osos.2a3, intervalos.incremento.osos.3a4,
intervalos.incremento.osos.4a5)
row.names(incrementos) <- c('incremento.osos.2a3', 'incremento.osos.3a4',
'incremento.osos.4a5')
xtable(incrementos)
a <- t(matrix(c(-1,1,0,0, 0,0,-1,1), ncol = 4, byrow = TRUE ))
incrementos.osos <-  as.matrix(osos)%*%a
incrementos.osos <- as.data.frame(incrementos.osos)
colnames(incrementos.osos) <- c('incremento.2a3', 'incremento.4a5')
S_z <- t(a)%*%cov(osos)%*%a
media.z <- matrix(apply(incrementos.osos, 2, mean))
dibuja.elipse(S=S_z, alpha=0.05, n=dim(osos)[1], p=dim(osos)[2],
media=media.z, xlim=c(-25,45), ylim=c(-15,25))
points(media.z[1], media.z[2], col ='green', pch=20)
S_z <- t(a)%*%cov(osos)%*%a
S_z
colnames(S_z) <- c('incremento.2a3', 'incremento.4a5')
S_z
a <- t(matrix(c(-1,1,0,0, 0,0,-1,1), ncol = 4, byrow = TRUE ))
incrementos.osos <-  as.matrix(osos)%*%a
incrementos.osos
incrementos.osos[,1]
range(incrementos.osos[,1])
range(incrementos.osos[,2])
incrementos.osos
colnames(incrementos.osos) <- c('incremento.2a3', 'incremento.4a5')
incrementos.osos
?abline
incrementos.osos
View(incrementos)
grep("blue", colors())
colors()[grep("blue", colors())]
library(ellipse)
?ellipse
nivel <- qf(1-alpha, df1 = p, df2 = n-p ) #cuantil de la distribucion f con confianza 1-alpha
c <- ((p*(n-1))/(n*(n-p)) )*nivel #cuantil de la T de Hotelling
c
plot(ellipse(S_z, centre = media.z, level = .95, t = c))
n=dim(osos)[1]
p=dim(osos)[2]
media=media.z
library(ellipse)
nivel <- qf(1-alpha, df1 = p, df2 = n-p ) #cuantil de la distribucion f con confianza 1-alpha
c <- ((p*(n-1))/(n*(n-p)) )*nivel #cuantil de la T de Hotelling
c
plot(ellipse(S_z, centre = media.z, level = .95, t = c))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))) )
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=range(radiacion.sqrt[,1]), ylim=range(radiacion.sqrt[,2]))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,60),
ylim=c(-20,30))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,60),
ylim=c(-20,40))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,60),
ylim=c(-20,35))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,60),
ylim=c(-20,55))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,60),
ylim=c(-20,25))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,60),
ylim=c(-20,29))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,55),
ylim=c(-20,29))
plot(ellipse(S_z, centre = media.z, level = .95,
t =sqrt(((n-1)*p/(n*(n-p)))*qf(0.95,p,n-p))),
xlim=c(-20,54),
ylim=c(-20,29))
S
diag(S)
ss <- diag(S)
ss <- diag(S)
nivel <- sqrt(ss/n)*(qt(1-(alpha/2*p), df = n-1))
ss <- diag(S)
nivel <- qt(1-(alpha/2*p), df = n-1)
errores <- nivel*sqrt(ss/n)
Bonferroni.intervalos <- function(S,media, alpha, a, n, p)
{
#alpha (numeric): nivel de signiificancia
#n (numeric): numero de observaciones
#p (numeric): numero de variables
#media (vector): vector-columna de medias
#S (matrix): matriz de covarianzas
ss <- diag(S)
nivel <- qt(1-(alpha/(2*p)), df = n-1)
errores <- nivel*sqrt(ss/n)
#errores <- nivel*sqrt(ss) #es importante el orden
inf.intervalos <- media - errores
sup.intervalos <- media + errores
intervalos <- as.data.frame(cbind(inf.intervalos,media, sup.intervalos))
colnames(intervalos) <- paste0(c('lim.inferior.Bonferri.media.al',
'media.muestral',
'lim.superior.Bonferri.media.al'),
c(as.character(1-(alpha/(2*p))),
'',as.character(1-(alpha/(2*p))  )))
#row.names(intervalos) <- colnames(data)
return(intervalos)
}
medias.osos.len <- matrix(apply(osos, 2, mean))
medias.osos.len
S <- cov(osos)
Bonferroni.intervalos <- function(S,media, alpha, n, p)
{
#alpha (numeric): nivel de signiificancia
#n (numeric): numero de observaciones
#p (numeric): numero de variables
#media (vector): vector-columna de medias
#S (matrix): matriz de covarianzas
ss <- diag(S)
nivel <- qt(1-(alpha/(2*p)), df = n-1)
errores <- nivel*sqrt(ss/n)
#errores <- nivel*sqrt(ss) #es importante el orden
inf.intervalos <- media - errores
sup.intervalos <- media + errores
intervalos <- as.data.frame(cbind(inf.intervalos,media, sup.intervalos))
colnames(intervalos) <- paste0(c('lim.inferior.Bonferri.media.al',
'media.muestral',
'lim.superior.Bonferri.media.al'),
c(as.character(1-(alpha/(2*p))),
'',as.character(1-(alpha/(2*p))  )))
#row.names(intervalos) <- colnames(data)
return(intervalos)
}
medias.osos.len <- matrix(apply(osos, 2, mean))
S <- cov(osos)
medias.osos.len <- matrix(apply(osos, 2, mean))
S <- cov(osos)
n <- dim(osos)[1]
p <- dim(osos)[2]
intervalos.bonferri.len <- Bonferroni.intervalos(S,medias.osos.len, alpha= alpha,n,p )
intervalos.bonferri.len
row.names(intervalos.bonferri.len)
row.names(intervalos.bonferri.len) <- colnames(osos)
xtable(intervalos.bonferri.len)
