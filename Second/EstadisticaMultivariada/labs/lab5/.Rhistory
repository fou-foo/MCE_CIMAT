intervalos.incremento.osos.3a4 <- T2.intervalos(S=cov(osos), media= media2, alpha=0.05,
a = a, n=n, p=p)
a <- matrix(c(-1,1,0,0), ncol = 1 )
media3 <- t(a)%*%media
intervalos.incremento.osos.2a3 <- T2.intervalos(S=cov(osos), media= media3, alpha=0.05,
a = a, n=n, p=p)
incrementos <- rbind(intervalos.incremento.osos.2a3, intervalos.incremento.osos.3a4,
intervalos.incremento.osos.4a5)
row.names(incrementos) <- c('incremento.osos.2a3', 'incremento.osos.3a4',
'incremento.osos.4a5')
#xtable(incrementos)
a <- t(matrix(c(-1,1,0,0, 0,0,-1,1), ncol = 4, byrow = TRUE ))
incrementos.osos <-  as.matrix(osos)%*%a
incrementos.osos <- as.data.frame(incrementos.osos)
colnames(incrementos.osos) <- c('incremento.2a3', 'incremento.4a5')
S_z <- t(a)%*%cov(osos)%*%a
colnames(S_z) <- c('incremento.2a3', 'incremento.4a5')
media.z <- matrix(apply(incrementos.osos, 2, mean))
dibuja.elipse(S=S_z, alpha=0.05, n=dim(osos)[1], p=dim(osos)[2],
media=media.z, xlim=c(-20,60),
ylim=c(-20,30))
points(incrementos.osos[,1], incrementos.osos[,2], col='gray', pch=20)
points(media.z[1], media.z[2], col ='green', pch=20)
abline(v = incrementos$lim.inferior.T2intervalo.media.al0.95[1], col ='steelblue' )
abline(v = incrementos$lim.superior.T2intervalo.media.al0.95[1], col ='steelblue' )
abline(h = incrementos$lim.inferior.T2intervalo.media.al0.95[3], col ='steelblue' )
abline(h = incrementos$lim.superior.T2intervalo.media.al0.95[3], col ='steelblue' )
Bonferroni.intervalos <- function(S,media, alpha, n, p, a)
{
#alpha (numeric): nivel de significancia conjunto
#n (numeric): numero de observaciones
#p (numeric): numero de variables OJO DEBE DE SER LA DIMENSION DEL VECTOR ALEATORIO NORMAL MULTIVARIADO
#media (vector): vector-columna de medias ORIGINALES MUESTRALES
#S (matrix): matriz de covarianzas ORIGINAL MUEsTRAL
#a (vector): vector columna que expresa combinacion lineal
media <- t(media)%*%a
ss <- t(a)%*%S%*%a
nivel <- qt(1-(alpha/(2*p)), df = n-1, lower.tail =TRUE)
errores <- nivel*sqrt(ss/n)
inf.intervalos <- media - rep(errores, length(media))
sup.intervalos <- media + rep(errores, length(media))
alpha_ <- alpha/(2*p)
a <- round(1-alpha_,3)
a <- as.character(a)
intervalos <- as.data.frame(cbind(inf.intervalos,media, sup.intervalos))
colnames(intervalos) <- paste0(c('lim.inferior.Bonferri.media.al',
'media.muestral',
'lim.superior.Bonferri.media.al'),
c(a,'',a  ))
return(intervalos)
}
medias.osos.len <- matrix(apply(osos, 2, mean))
S <- cov(osos)
n <- dim(osos)[1]
p <- dim(osos)[2]
alpha <- 0.05
a <- as.matrix(c(1,0,0,0), ncol=1)
intervalos.bonferri.len1 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
a <- as.matrix(c(0,1,0,0), ncol=1)
intervalos.bonferri.len2 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
a <- as.matrix(c(0,0,1,0), ncol=1)
intervalos.bonferri.len3 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
a <- as.matrix(c(0,0,0,1), ncol=1)
intervalos.bonferri.len4 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=p, a=a  )
intervalos.bonferri.len <- rbind(intervalos.bonferri.len1, intervalos.bonferri.len2,
intervalos.bonferri.len3, intervalos.bonferri.len4)
row.names(intervalos.bonferri.len) <- colnames(osos)
#xtable(intervalos.bonferri.len)
a <- t(matrix(c(-1,1,0,0), ncol = 4, byrow = TRUE ))
intervalos.bonferri.incremento1 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=3, a=a  )
a <- as.matrix(c(0,-1,1,0), ncol=1)
intervalos.bonferri.incremento2 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=3, a=a  )
a <- as.matrix(c(0,0,-1,1), ncol=1)
intervalos.bonferri.incremento3 <- Bonferroni.intervalos(S,medias.osos.len, alpha=alpha,n=n,p=3, a=a  )
intervalos.bonferri.incremento <-rbind(intervalos.bonferri.incremento1,
intervalos.bonferri.incremento2,
intervalos.bonferri.incremento3)
row.names(intervalos.bonferri.incremento) <- c('incremento.2a3',
'incremento.3a4',
'incremento.4a5')
#xtable(intervalos.bonferri.incremento)
costos <- read.table(file='costofliving.txt', header = TRUE )
Z <- costos[, c('pop', 'income') ]
Z <- as.matrix(Z)
n <- dim(costos)[1]
Z <- cbind(matrix(rep(1, n)), Z)
r <- dim(Z)[2]
Y <- costos[, c('rent', 'house', 'COL') ]
Y <- as.matrix(Y)
B_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y #primer ajuste usando todas
#las variables
errores <- Y - Z%*%B_hat
sigma <- (t(errores)%*%errores)/(n) #el estimador MLE entre 'n'
Z <- costos[, c('income') ]
Z <- as.matrix(Z)
n <- dim(costos)[1]
Z <- cbind(matrix(rep(1, n)), Z)
r <- dim(Z)[2]
Y <- costos[, c('rent', 'house', 'COL') ]
Y <- as.matrix(Y)
B_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y #primer ajuste usando solo
#la variable 'income'
errores <- Y - Z%*%B_hat
sigma_pop <- (t(errores)%*%errores)/(n) #el MLE divido entre 'n'
q <- 1
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado.pop  <- log(det(sigma)/det(sigma_pop))*(-1)*(n-r-.5*(m-r+q+1))
test1 <- qchisq(1-.05, df=m*(r-q))
Z <- costos[, c('pop') ]
Z <- as.matrix(Z)
n <- dim(costos)[1]
Z <- cbind(matrix(rep(1, n)), Z)
r <- dim(Z)[2]
Y <- costos[, c('rent', 'house', 'COL') ]
Y <- as.matrix(Y)
B_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y #primer ajuste usando
#solo la variable 'pop'
errores <- Y - Z%*%B_hat
sigma.income<-(t(errores)%*%errores)/(n) #el MLE divido entre 'n'
q <- 1 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado.income  <- log(det(sigma)/det(sigma.income))*
(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
Z <- costos[, c('pop','income') ]
Z <- as.matrix(Z)
Y <- costos[, c('rent', 'house', 'COL') ]
modelo.uni <- lm(rent~Z, data =Y)
summary(modelo.uni)
confint(modelo.uni)
Z <- costos[, c('pop','income') ]
Z <- as.matrix(Z)
Y <- costos[, c('rent', 'house', 'COL') ]
modelo.uni <- lm(house~Z, data =Y)
summary(modelo.uni)
confint(modelo.uni)
Z <- costos[, c('pop','income') ]
Z <- as.matrix(Z)
Y <- costos[, c('rent', 'house', 'COL') ]
modelo.uni <- lm(COL~Z, data =Y)
summary(modelo.uni)
confint(modelo.uni)
inversiones <- read.table('cash hi tech.txt', header =FALSE,
sep ='\t', skip = 2, dec=c(',','.'))
colnames(inversiones) <- c('Company', 'Marketcap.Mil', 'Net.cash.Mil',
'Cashflo.2009',
'Cashflow.porcentaje.capital',
'Cash.mas.cashflow.porcentaje.capital',
'Current.Dividend',
'Dividend.al.60.poyout')
inversiones.limpio <- apply(inversiones[, 2:dim(inversiones)[2]], 2,
function(x)
{
as.numeric(as.character(x))
})
inversiones.limpio <- as.data.frame(inversiones.limpio)
inversiones.limpio <- cbind(inversiones[,1], inversiones.limpio)
colnames(inversiones.limpio)[1] <- 'Company'
Z <- inversiones.limpio[, c('Marketcap.Mil', 'Net.cash.Mil', 'Cashflo.2009')]
r <- dim(Z)[2]+1
Y <- inversiones.limpio[, c('Current.Dividend',
'Dividend.al.60.poyout')]
modelo1 <- lm(as.matrix(Y)~as.matrix(Z))
n <- dim(inversiones.limpio)[1]
Sigma <- (t(modelo1$residuals)%*%modelo1$residuals)/n #estimador MLE
modelo.nulo <- lm(as.matrix(Y) ~ 1)
Sigma.nulo <- t(modelo.nulo$residuals)%*%modelo.nulo$residuals/n
q <- 3 #numero de vectores que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- log(det(Sigma)/det(Sigma.nulo))*(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
summary(modelo1)
Z2 <- inversiones.limpio[, c('Marketcap.Mil', 'Net.cash.Mil',
'Cashflo.2009',
'Cashflow.porcentaje.capital',
'Cash.mas.cashflow.porcentaje.capital' )]
r <- dim(Z2)[2]+1
modelo.saturado <- lm(as.matrix(Y)~as.matrix(Z2))
n <- dim(inversiones.limpio)[1]
Sigma.saturado <- (t(modelo.saturado$residuals)%*%
modelo.saturado$residuals)/n #estimador MLE
q <- 3 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- log(det(Sigma.saturado)/det(Sigma))*(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
summary(modelo.saturado)
Z3 <- inversiones.limpio[, c('Cashflow.porcentaje.capital',
'Cash.mas.cashflow.porcentaje.capital' )]
r <- dim(Z3)[2]+1
modelo.aumentado <- lm(as.matrix(Y)~as.matrix(Z3))
n <- dim(inversiones.limpio)[1]
Sigma.umentado <- (t(modelo.aumentado$residuals)%*%
modelo.aumentado$residuals)/n #estimador MLE
q <- 2 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- (log(det(Sigma.umentado)/det(Sigma.nulo)))**(-1)*(-1)*
(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
Z4 <- inversiones.limpio[, c('Cashflow.porcentaje.capital')]
r <- 1+1
modelo.simple <- lm(as.matrix(Y)~as.matrix(Z4))
n <- dim(inversiones.limpio)[1]
Sigma.simple <- (t(modelo.simple$residuals)%*%
modelo.simple$residuals)/n #estimador MLE
q <- 1 #numero de variables que utiliza la hipotesis nula
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
LRT.ajustado  <- log(det(Sigma.umentado)/det(Sigma.simple))*(-1)*(n-r-.5*(m-r+q+1))
test2 <- qchisq(1-.05, df=m*(r-q))
summary(modelo.simple)
(2*pi)^(-n*2/2)*exp(-n*2/2)*det(Sigma.simple)^(-n/2)
(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.simple)^(-n/2)/(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.umentado)^(-n/2)
n <-10
n <-15
(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.simple)^(-n/2)/(2*pi)^(-n*m/2)*exp(-n*m/2)*det(Sigma.umentado)^(-n/2)
m
m <- dim(Y)[2] #numero de varibles respuesta en el modelo completo
class(modelo.simple)
plot(modelo.simple)
modelo.simple$residuals
mapply(modelo.simple$residuals, 2, mean)
apply(modelo.simple$residuals, 2, mean)
errores <- modelo.simple$residuals
apply(errores, 2, mean)
View(errores)
var(errores)
cov(errores)
cov(errores)
cov(errores)
var(errores)
cov(errores)
var(errores)-
cov(errores)
cov(errores)
b <- modelo.simple$coefficients
b
b
S <- t(errores)%*%errores/(n-2)
S
S
library(car)
Anova(modelo.simple)
Anova(modelo.simple)
summary(Anova(modelo.simple))
errores <- modelo.simple$residuals
apply(errores, 2, mean)
round(apply(errores, 2, mean), 5)
S <- t(errores)%*%errores/(n-2)
S
S <- t(errores)%*%errores/(n-2)
cov(errores)
apply(errores, 2, cor)
cor(errores)
errores
cor(errores[1])
cor(errores[1,])
cor(errores)
library(mvnormtest)
install.packages("mvnormtest")
library(mvnormtest)
?mvnormtest(errores)
?mshapiro.test(errores)
?mshapiro.test(errores)
mshapiro.test(errores)
data(EuStockMarkets)
C <- t(EuStockMarkets[15:29,1:4])
C
mshapiro.test(C)
mshapiro.test(t(errores))
library(MASS)
mvrnorm(n = 1, c(0,0), diag(c(1,2)), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
x <- mvrnorm(n = 1000, c(0,0), diag(c(1,2)), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
x
mshapiro.test(x)
mshapiro.test(t(x))
x <- mvrnorm(n = 100, c(0,0), diag(c(1,2)), tol = 1e-6, empirical = FALSE, EISPACK = FALSE)
mshapiro.test(t(x))
library(mvnormtest)
mshapiro.test(t(errores))
20/30
20/90
27/90
.3*4
27/(90+18)
27/(90+18)
library(MASS)
?mvrnorm()
S1 <- diag(c(1,1))
mu <- c(0,0)
S1 <- diag(c(1,1))
S1
mu <- c(0,0)
S2 <- diag(c(2,2))
S2
m.a1<- mvrnorm(100, mu=mu, Sigma=S1)
m.a2<- mvrnorm(100, mu=mu, Sigma=S2)
m.a1
m.a1<- as.data.frame(m.a1)
View(m.a1)
m.a2<- mvrnorm(100, mu=mu, Sigma=S2)
m.a2 <- as.data.frame(m.a2)
colnames(m.a2) <- colnames(m.a1) <- c('x', 'y')
m.a1$clase <- 1
m.a2$clase <- 2
m.a <- rbind(m.a1, m.a2)
plot(m.a)
plot(m.a[1,], m.a[2,])
plot(m.a[1,], m.a[2,])
m.a[1,]
plot(m.a[,1], m.a[,2])
plot(m.a[,1], m.a[,2])
ggplot(m.a, aes(x=x, y=y, color = clase))+geom_poin()
library(ggplot2)
ggplot(m.a, aes(x=x, y=y, color = clase))+geom_poin()
ggplot(m.a, aes(x=x, y=y, color = clase))+geom_point()
ggplot(m.a, aes(x=x, y=y, color = factor(clase)))+geom_point()
x <- seq(-1, 1, .01)
c <- 1
x <- seq(-c, c, .01)
y <- sqrt(c**2-x**2)
y <- sqrt(c**2-x**2) + rnom(0,0,c/10)
y <- sqrt(c**2-x**2) + rnorm(0,0,c/10)
y1 <- sqrt(c**2-x**2) + rnorm(0,0,c/10)
y2 <- -sqrt(c**2-x**2) - rnorm(0,0,c/10)
rep(x, 2)
x
c <- 1
x <- seq(-c, c, .01)
x
rep(x, 2)
m.a1 <- data.frame(x=rep(x, 2), y = c(y1,y2))
n <- 100
x <- seq(-c, c, length=n)
n <- 100
x <- seq(-c, c, length=n)
y1 <- sqrt(c**2-x**2) + rnorm(n,0,c/10)
y2 <- -sqrt(c**2-x**2) - rnorm(n,0,c/10)
m.a1 <- data.frame(x=rep(x, 2), y = c(y1,y2))
plot(m.a1$x, m.a1$y)
plot(m.a1$x, m.a1$y)
m.a1 <- data.frame(x=rep(x, 2), y = c(y1,y2), clase=1)
plot(m.a1$x, m.a1$y)
plot(m.a1$x, m.a1$y, col='red')
plot(m.a1$x, m.a1$y, col='red', pch = 20)
c <- 4
n <- 100
x <- seq(-c, c, length=n)
y1 <- sqrt(c**2-x**2) + rnorm(n,0,c/10)
y2 <- -sqrt(c**2-x**2) - rnorm(n,0,c/10)
m.a2 <- data.frame(x=rep(x, 2), y = c(y1,y2))
m.a2 <- data.frame(x=rep(x, 2), y = c(y1,y2), clase=2)
m.a2
View(m.a2)
plot(m.a2$x, m.a2$y, col='red', pch = 20)
plot(m.a2$x, m.a2$y, col='blue', pch = 20)
m.a <- rbind(m.a1, m.a2)
library(ggplot2)
ggplot(m.a, aes(x=x, y=y, color = factor(clase)))+geom_point()
kmeans(m.a, centers = 2)
label<- kmeans(m.a, centers = 2)
label
label$cluster
plot(m.a$x, m.a$y, col=label$cluster , pch = 20)
label<- kmeans(m.a, centers = 2)
plot(m.a$x, m.a$y, col=label$cluster , pch = 20)
label<- kmeans(m.a, centers = 2)
plot(m.a$x, m.a$y, col=label$cluster , pch = 20)
label<- kmeans(m.a, centers = 2)
plot(m.a$x, m.a$y, col=label$cluster , pch = 20)
label<- kmeans(m.a, centers = 2)
plot(m.a$x, m.a$y, col=label$cluster , pch = 20)
(.05/2)**.5
dir()
getwd()
#Ruta de datos correspondiente
setwd('C:\\Users\\fou-f\\Desktop\\MCE\\Second\\EstadisticaMultivariada\\labs\\lab5')
production <- read.table("production.txt",header=TRUE)
attach(production)
## Grafica exploratoria
par(mfrow=c(1,1))
plot(production$RunSize,production$RunTime,xlab="Run Size", ylab="Run Time")
## Modelo Simple
m1 <- lm(RunTime~RunSize)
summary(m1)
## Linea de modelo con datos originales
plot(production$RunSize,production$RunTime,xlab="Run Size", ylab="Run Time")
abline(lsfit(production$RunSize,production$RunTime))
## Intervalos de confianza al 95% de los parametros
round(confint(m1,level=0.95),3)
## Intervalos de confianza y de prediccion
predict(m1,newdata=data.frame(RunSize=c(50,100,150,200,250,300,350)),interval="confidence",level=0.95)
predict(m1,newdata=data.frame(RunSize=c(50,100,150,200,250,300,350)),interval="prediction",level=0.95)
## Prueba anova para una regresion
anova(m1)
detach(production)
## Evaluacion de una regresion
anscombe <- read.table("anscombe.txt",header=TRUE)
attach(anscombe)
## Visualizacion de los elementos y una regresion simple
par(mfrow=c(2,2))
plot(x1,y1,xlim=c(4,20),ylim=c(3,14),main="Conjunto 1")
abline(lsfit(x1,y1))
plot(x2,y2,xlim=c(4,20),ylim=c(3,14),main="Conjunto 2")
abline(lsfit(x2,y2))
plot(x3,y3,xlim=c(4,20),ylim=c(3,14),main="Conjunto 3")
plot(x4,y4,xlim=c(4,20),ylim=c(3,14),main="Conjunto 4")
abline(lsfit(x3,y3))
abline(lsfit(x4,y4))
## Parametros de la regresion para los elementos
m1 <- lm(y1~x1)
summary(m1)
m2 <- lm(y2~x2)
summary(m2)
m3 <- lm(y3~x3)
summary(m3)
m4 <- lm(y4~x4)
summary(m4)
## Comparacion de los residuales para cada conjunto de datos
par(mfrow=c(2,2))
plot(x1,m1$residuals,ylab="Residuales",xlim=c(4,20),ylim=c(-3.5,3.5),main="Conjunto 1")
plot(x2,m2$residuals,ylab="Residuales",xlim=c(4,20),ylim=c(-3.5,3.5),main="Conjunto 2")
plot(x3,m3$residuals,ylab="Residuales",xlim=c(4,20),ylim=c(-3.5,3.5),main="Conjunto 3")
plot(x4,m4$residuals,ylab="Residuales",xlim=c(4,20),ylim=c(-3.5,3.5),main="Conjunto 4")
## Graficos basicos para verificacion de regresion
production <- read.table("production.txt",header=TRUE)
attach(production)
m1 <- lm(RunTime~RunSize)
par(mfrow=c(2,2))
plot(m1)
## Verificacion del efecto de outliers en una regresion
bonds <- read.table("bonds.txt",header=TRUE)
attach(bonds)
## Grafica exploratoria
par(mfrow=c(1,1))
plot(CouponRate,BidPrice,xlab="Tasa Bono (%)", ylab="Precio subasta ($)",ylim=c(85,120),xlim=c(2,14))
abline(lsfit(CouponRate,BidPrice))
## Regresion Inicial
m1 <- lm(BidPrice~CouponRate)
summary(m1)
## Intercalos de confianza al 95%
round(confint(m1,level=0.95),3)
#Table 3.4 on page 62
leverage1 <- hatvalues(m1)
StanRes1 <- rstandard(m1)
residual1 <- m1$residuals
cbind(Case,CouponRate,BidPrice,round(leverage1,3),round(residual1,3),round(StanRes1,3))
## Grafica de residuales estandarizados
plot(CouponRate,StanRes1,xlab="Tasa Bono (%)", ylab="Residuales estandarizados",xlim=c(2,14))
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(CouponRate,StanRes1,Case)
## Regresion sin los puntos atipicos
m2 <- update(m1, subset=(1:35)[-c(4,13,35)])
summary(m2)
## Grafica de la regresion sin los puntos atipicos
plot(CouponRate[-c(4,13,35)],BidPrice[-c(4,13,35)],xlab="Tasa Bono (%)", ylab="Bid Price ($)",ylim=c(85,120),xlim=c(2,14),main="Regular Bonds")
abline(m2)
identify(CouponRate,StanRes1,Case)
## Regresion sin los puntos atipicos
m2 <- update(m1, subset=(1:35)[-c(4,13,35)])
summary(m2)
## Grafica de la regresion sin los puntos atipicos
plot(CouponRate[-c(4,13,35)],BidPrice[-c(4,13,35)],xlab="Tasa Bono (%)", ylab="Bid Price ($)",ylim=c(85,120),xlim=c(2,14),main="Regular Bonds")
abline(m2)
plot(CouponRate[-c(4,13,35)],StanRes2,xlab="Tasa Bono (%)", ylab="Residuales estandarizados",xlim=c(2,14),main="Bonos regulares")
abline(h=2,lty=2)
abline(h=-2,lty=2)
## Uso de la distancia de Cook en el modelo con dotos los datos
cd1 <- cooks.distance(m1)
plot(CouponRate,cd1,xlab="Tasa Bono (%)", ylab="Distancia de Cook")
abline(h=4/(35-2),lty=2)
identify(CouponRate,cd1,Case)
cleaning <- read.table("cleaning.txt",header=TRUE)
attach(cleaning)
## Grafica exploratoria
par(mfrow=c(1,1))
plot(Crews,Rooms,xlab="Tamanio Equipo",ylab="Numero de cuartos limpiados")
abline(lsfit(Crews,Rooms))
## Regresion inicial
m1 <- lm(Rooms~Crews)
summary(m1)
predict(m1,newdata=data.frame(Crews=c(4,16)),interval="prediction",level=0.95)
## Verificacion de los residuales estandarizados
StanRes1 <- rstandard(m1)
plot(Crews,StanRes1,xlab="Tamanio Equipo", ylab="Residuales estandarizados")
## Uso de una transformacion
sabs <- sqrt(abs(StanRes1))
plot(Crews,sabs,xlab="Tamanio Equipo", ylab="Raiz cuadrada(|Residuales estandarizados|)")
abline(lsfit(Crews,sabs))
## Analisis de residuales
par(mfrow=c(2,2))
plot(m1)
## Analisis de la desviacion estandar
sqrt(tapply(Rooms,Crews,var))
sds <- c(3.000000,4.966555,4.690416,6.642665,7.927123,7.28991,12.000463)
xx <- c(2,4,6,8,10,12,16)
par(mfrow=c(1,1))
plot(xx,sds,xlab="Tamanio Equipo", ylab="Desviaci?n estandar(Cuartos limpiados)")
abline(lsfit(xx,sds))
## Modelacion con transformacion de potencia
sqrtcrews <- sqrt(Crews)
sqrtrooms <- sqrt(Rooms)
m2 <- lm(sqrtrooms~sqrtcrews)
summary(m2)
predict(m2,newdata=data.frame(sqrtcrews=c(2,4)),interval="prediction",level=0.95)
## Graficos de los datos y residuales con la transformacion
par(mfrow=c(1,2))
plot(sqrt(Crews),sqrt(Rooms),xlab="Raiz cuadrada(Tamanio Equipo)",ylab="Raiz cuadrada(Numero de cuartos limpiados)")
abline(lsfit(sqrt(Crews),sqrt(Rooms)))
StanRes2 <- rstandard(m2)
plot(sqrtcrews,StanRes2,xlab="Raiz cuadrada(Tamanio Equipo)", ylab="Residuales estandarizados")
par(mfrow=c(2,2))
plot(m2)
