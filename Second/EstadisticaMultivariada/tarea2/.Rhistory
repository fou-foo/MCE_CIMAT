knitr::opts_chunk$set(echo = TRUE, cache = FALSE )
bi <- function(x, y, mu.1 = 0, mu.2 = 1, sigma.1 = 1 ,sigma.2 = 1, rho)
{
#fijo los parametros para casos default y para hacer el siguiente ejercicio más facil
sin.x <- 2*pi*sqrt(sigma.1*sigma.2*(1-rho**2))
exp <- ( -1/ (2*(1-rho^2)) )* ( ( (x-mu.1)**2/ sigma.1) + ((y-mu.2)^2/sigma.2) -
2*rho*( ( (x-mu.1)/sqrt(sigma.1))*( (y-mu.2)/sqrt(sigma.2))) )
p <- (1/sin.x)*exp(exp)
return(p)
}
mu.1 = 0
mu.2 = 0
sigma.1 <- 1
sigma.2 <- 1
rho <- 0
x <- rnorm( 1, mu.1, sigma.1 )
y <- rnorm(1, mu.1, sigma.2)
bi(x,y, mu.1 , mu.2, sigma.1, sigma.2, rho ) #caso maximo
n <- 100 #raiz cuadrada del numero de puntos en la malla
set.seed(110) #fijo una semilla
x <- seq(-4,4,length=n)
y <- seq(-4,4,length=n)
rho <- runif(3, -1, 1)
rho <- sort(rho) # para apreciar los cambias de negativo a positivo
z1 <- outer(x, y, bi, rho= rho[1])
z2 <- outer(x, y, bi, rho= rho[2])
z3 <- outer(x, y, bi, rho= rho[3])
persp(x, y, z1, theta = 45, phi = 15,
xlab = "x", ylab = "y", zlab = "Densidad", main= paste0("rho=",rho[1]),
zlim = c(0,0.2))
persp(x, y, z2, theta = 45, phi = 15,
xlab = "x", ylab = "y", zlab = "Densidad", main= paste0("rho=",rho[2]),
zlim = c(0,0.2))
persp(x, y, z3, theta = 45, phi=15,
xlab = "x", ylab = "y", zlab = "Densidad", main= paste0("rho=",rho[3]),
zlim = c(0,0.5))
confelli<-function(b, C , df, level=0.95, xlab="",ylab="",add=T,prec=51, color)
{
d <- sqrt(diag(C))
dfvec <- c(2,df)
phase <- acos( C[1,2]/(d[1]*d[2]) )
angles <- seq(-pi, pi, len=prec)
mult <- sqrt( dfvec[1]*qf(level,dfvec[1],dfvec[2]) )
xpts <- b[1] + d[1]*mult*cos(angles)
ypts <- b[2] + d[2]*mult*cos(angles+phase)
if(add) lines(xpts,ypts, col = color)
else plot(xpts,ypts,type="l",xlab=xlab,ylab=ylab, col = color)
a<-round(runif(1,1,51))
text(xpts[a],ypts[a],paste(level),adj=c(0.5,0.5), font=2,cex=0.7)
}
library(MASS)
S <- matrix(c(1,0.8,0.8,1), ncol=2, nrow = 2) #matriz de varianza
mu <- c(0,0)
m.a <- mvrnorm(n=500, mu = mu, Sigma = S)
#realizamos el inciso b
media <- apply(m.a, 2, mean )
s.1 <- apply(m.a, 2, var) #estimamos la varianza
s.2 <- var( m.a[,1], m.a[,2])
s <- matrix(c(s.1[1], s.2, s.2, s.1[1]), byrow = TRUE, ncol = 2)
#graficamos
plot(m.a, col="#1D91C0", alpha = 0.1, pch=20, main="Regiones de confianza .95,.8 y .5 (rojo,naranja,morado) ",
xlab="x", ylab="y")
confelli( b= media, C=s, df=498, col ='red') #porque solo estimamos 2 parametros
confelli(b=media, C=s, df=498, level=0.80, col = 'purple')
confelli(b=media, C=s, df=498, level=0.50, col= 'orange')
var(m.a)
s
media #media de la uestra generada
s # varianza de la muestra generada
media <- apply(x, 1, mean) #medias
s <- var(x)   #varianzas
x a{ m-a}
x <- m.a
media <- apply(x, 1, mean) #medias
s <- var(x)   #varianzas
centrados <- matrix(x[, 1] -media[1], x[,2] - media[2], ncol=2, nrow=n) #centor la muestra
centrados
centrados <- data.frame(x1= x[, 1]-media[1],x2= x[,2]- media[2]) #centro la muestra
solve(s)
t(centrados)
d.gen <- solve(s)%*%t(centrados)
d.gen <- centrados%*%solve(s)%*%t(centrados)
centrados%*%solve(s)
d.gen <- as.matrix(centrados)%*%solve(s)%*%t(centrados)
dim(d.gen)
d.gen <- solve(s)%*%t(centrados)
d.gen <- t(centrados)%*%solve(s)%*%t(centrados)
d.gen <- (centrados)%*%solve(s)%*%t(centrados)
d.gen <- as.matrix(centrados)%*%solve(s)%*%t(as.matrix(centrados))
View(d.gen)
solve(s)
centrados <- data.frame(x1= x[, 1]-media[1],x2= x[,2]- media[2]) #centro la muestra
centrados
t(as.matrix(centrados))
solve(s)%*%t(as.matrix(centrados))
d.gen <- as.matrix(centrados)%*%solve(s)%*%t(as.matrix(centrados))
dim(d.gen)
library(scales)
confelli<-function(b,C,df,level=0.95,
xlab="",ylab="",add=T,prec=51){
d<-sqrt(diag(C))
dfvec<-c(2,df)
phase<-acos(C[1,2]/(d[1]*d[2]))
angles<-seq(-(pi),pi,len=prec)
mult<-sqrt(dfvec[1]*qf(level,dfvec[1],dfvec[2]))
xpts<-b[1]+d[1]*mult*cos(angles)
ypts<-b[2]+d[2]*mult*cos(angles+phase)
if(add) lines(xpts,ypts)
else plot(xpts,ypts,type="l",xlab=xlab,ylab=ylab)
a<-round(runif(1,1,51))
text(xpts[a],ypts[a],paste(level),adj=c(0.5,0.5), font=2,cex=0.7)
}
library("MASS")
Sigma=matrix(c(1,0.8,0.8,1), ncol=2, nrow = 2)
set.seed(12345)
Muestra <-mvrnorm(n=500, mu = c(0,0), Sigma = Sigma)
media<-matrix(c(mean(Muestra[,1]),mean(Muestra[,2])),nrow=1,ncol=2)
Mcov<-matrix(c(var(Muestra[,1]),cov(Muestra[,1],Muestra[,2]),
cov(Muestra[,1],Muestra[,2]),var(Muestra[,2])),ncol=2,nrow=2)
plot(Muestra,xlim=c(-4,4),ylim=c(-4,4),col=alpha("blue", 0.2),pch=8,main="Elipsoides de confianza",asp=0.8)
confelli(b=media,C=Mcov,df=498)
confelli(b=media,C=Mcov,df=498,level=0.80)
confelli(b=media,C=Mcov,df=498,level=0.50)
Mahala<-function(x,y,Sigma){
n<-length(x)
x_y<-matrix(x-mean(x),y-mean(y), ncol=2, nrow=n)
distance<-rep(1,n)
for (i in 1:n){
distance[i]<-sqrt(t(x_y[i,]) %*% solve(Sigma) %*% x_y[i,])
}
distance
}
distancia<-Mahala(Muestra[,1],Muestra[,2],Sigma)
y=Muestra[,2]
x=Muestra[,1]
n<-length(x)
x_y<-matrix(x-mean(x),y-mean(y), ncol=2, nrow=n)
distance<-rep(1,n)
for (i in 1:n){
distance[i]<-sqrt(t(x_y[i,]) %*% solve(Sigma) %*% x_y[i,])
}
x <- m.a
media <- apply(x, 1, mean) #medias
s_1 <- solve(var(x))   #varianzas
centrados <- data.frame(x1= x[, 1]-media[1],x2= x[,2]- media[2]) #centro la muestra
d.gen <- vector(mode='numeric' , length= dim(x)[1])
i <. 1
i <- 1
centrados[i,]
d.gen <- as.matrix(centrados[i, 1])%*%s_1%*%t(centrados[i,])
t(centrados[i,])
s_1%*%t(centrados[i,])
centrados[i, 1]
d.gen <- as.matrix(centrados[i, ])%*%s_1%*%t(centrados[i,])
for( i in 1:dim(x)[1])
{
d.gen[i] <- as.matrix(centrados[i, ])%*%s_1%*%t(centrados[i,])
}
dist.gen <- function(x)
{
# x: dataframe con la muestra
media <- apply(x, 1, mean) #medias
s_1 <- solve(var(x))   #varianzas
centrados <- data.frame(x1= x[, 1]-media[1],x2= x[,2]- media[2]) #centro la muestra
d.gen <- vector(mode='numeric' , length= dim(x)[1])
for( i in 1:dim(x)[1])
{
d.gen[i] <- as.matrix(centrados[i, ])%*%s_1%*%t(centrados[i,])
}
return(d.gen)
}
distancias <- dist.gen(m.a)
distancias <- as.data.frame(dist = distancias)
distancias <- data.frame(dist = distancias)
library(ggplot2)
View(distancias)
ggplot(distancias, aes(dist, color ='1D91C0')) + geom_histogram()
ggplot(distancias, aes(dist, color ='#1D91C0')) + geom_histogram()
ggplot(distancias, aes(dist, color =I('#1D91C0'))) + geom_histogram()
ggplot(distancias, aes(dist, fill =I('#1D91C0'))) + geom_histogram()
ggplot(distancias, aes(dist, fill =I('#1D91C0'))) +
geom_histogram(aes(y=..count../sum(..count..))) +
theme_minimal() + xlab('') +ylab('Distancia') + ggtitle('Distancias generalizadas de la m.a')
shapiro.test(distancia)
?shapiro.test(distancia)
shapiro.test(distancia)
shapiro.test()
shapiro.test
shapiro.test(rnorm(100))
shapiro.test(distancia)
shapiro.test(rnorm(100))
shapiro.test(rnorm(1000))
shapiro.test(distancia)
shapiro.test(rnorm(1000))
shapiro.test(rnorm(10000))
shapiro.test(rnorm(4999))
shapiro.test(rnorm(4999))
shapiro.test(rnorm(4999))
shapiro.test(rnorm(4999))
?ks.test(distancia, '')
shapiro.test(distancias$dist)
checker <- function(n)    # Genera n pares marginales normales
# que no son normales bivariadas
{
checker <- NULL        # comienza una lista
for (i in 1:n)
{
x <- rnorm(2)      # par de normales independientes
if(x[1]>0)  x[2] <-  abs(x[2])
else     x[2] <- -abs(x[2])
checker <- rbind(checker, x)
}
checker
}
m.a <- checker(1000)
m.a <- as.dataframe(checker(1000))
m.a <- as.data.frame(checker(1000))
View(m.a)
shapiro.test(m.a$V1)
shapiro.test(m.a$V2)
shapiro.test(m.a$V1)
shapiro.test(m.a$V2)
checker <- function(n)    # Genera n pares marginales normales
# que no son normales bivariadas
{
checker <- NULL        # comienza una lista
for (i in 1:n)
{
x <- rnorm(2)      # par de normales independientes
if(x[1]>0)  x[2] <-  abs(x[2])
else     x[2] <- -abs(x[2])
checker <- rbind(checker, x)
}
checker
}
M<-checker(200)
par(mfrow=c(1,2))
hist(M[,1],col="blue",main="Histograma",ylab="Frecuencia",xlab="Primera columna")
hist(M[,2],col="Red",main="Histograma",ylab="Frecuencia",xlab="Segunda columna")
par(mfrow=c(1,2))
qqnorm(M[,1], col="blue", main="Q-Q plot columna 1")
qqline(M[,1],col="red")
qqnorm(M[,2], col="blue", main="Q-q plot Columna 2")
qqline(M[,2],col="red")
shapiro.test(M[,1])
shapiro.test(M[,2])
plot(M, axes=FALSE,xlab="Columna1", ylab="Columna2",cex = 1.0, pch = 16,col="blue", main="Pares bivariados")
rug(M[,1],side=1)
rug(M[,2],side=2)
m.a <- as.data.frame(checker(1000))
shapiro.test(m.a$V1)
View(m.a)
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .2 )) + geom_point()
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
theme_bw() + scale_color_manual( guide=FALSE)
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
theme_bw() + scale_color_manual(values='#1D91C0', guide=FALSE)
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
theme_bw(legend.position="none") + xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'")
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
theme(legend.position="none") + xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'")
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
theme_minimal(legend.position="none") + xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'")
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
theme(legend.position="none") + xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'") +
theme_minimal()
ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
guides(fill=FALSE)+ xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'") +
theme_minimal()
require(ggplot2)
x<-rnorm(300)
y<-rt(300,df=2)
xy<-data.frame(x,y)
xhist <- qplot(x, geom="histogram") + scale_x_continuous(limits=c(min(x),max(x))) + opts(axis.text.x = theme_blank(), axis.title.x=theme_blank(), axis.ticks = theme_blank(), aspect.ratio = 5/16, axis.text.y = theme_blank(), axis.title.y=theme_blank(), background.colour="white")
yhist <- qplot(y, geom="histogram") + coord_flip() + opts(background.fill = "white", background.color ="black")
yhist <- yhist + scale_x_continuous(limits=c(min(x),max(x))) + opts(axis.text.x = theme_blank(), axis.title.x=theme_blank(), axis.ticks = theme_blank(), aspect.ratio = 16/5, axis.text.y = theme_blank(), axis.title.y=theme_blank() )
scatter <- qplot(x,y, data=xy)  + scale_x_continuous(limits=c(min(x),max(x))) + scale_y_continuous(limits=c(min(y),max(y)))
none <- qplot(x,y, data=xy) + geom_blank()
layout(matrix(c(2,0,1,3),2,2,byrow=TRUE), widths=c(3,1),
heights=c(1,3), TRUE)
par(mar=c(5.1,4.1,0.1,0))
plot(air$Respirable.Particles~air$Nitrogen.Oxides,
pch=19,col="black",
xlim=c(0,600),ylim=c(0,80),
xlab="Nitrogen Oxides Concentrations",
ylab="Respirable Particle Concentrations")
par(mar=c(0,4.1,3,0))
hist(air$Nitrogen.Oxides,
breaks=seq(0,600,100),ann=FALSE,axes=FALSE,
col="black",border="white")
library(ggExtra)
install.packages("ggExtra")
library(ggExtra)
p <-ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
guides(fill=FALSE)+ xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'") +
theme_minimal()
ggMarginal(p, type = "density", margins = "y", size = 4, marginCol = "red")
p <-ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
guides(fill=FALSE)+ xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'") +
theme_minimal()
ggMarginal(p, type = "density", margins = "y", size = 4, marginCol = "red")
p
ggMarginal(p, type = "density", margins = "y", size = 4, marginCol = "red")
View(m.a)
?ggMarginal
ggMarginal(p, type = "density", margins = "both", size = 4, marginCol = I('#1D91C0'))
p <-ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
guides(fill=FALSE)+ xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'") +
theme_minimal()
p
ggMarginal(p, type = "density", margins = "both", size = 4, marginCol = I('#1D91C0'))
p <-ggplot(m.a, aes(x=V1, y=V2, color = I('#1D91C0'), alpha = .1 )) + geom_point()+
guides(fill=FALSE)+ xlab('x_1') + ylab('y_1')+
ggtitle("Distribución de la m.a. construida por la función 'cheker'") +
theme_minimal()
ggMarginal(p, type = "density", margins = "both", size = 4, marginCol = I('#1D91C0'))
