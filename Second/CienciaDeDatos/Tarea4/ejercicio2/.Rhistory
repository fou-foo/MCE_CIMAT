weights=w[indices], error=err[indices]))
}
err[m] <- sum(w*( diferentes )) /sum(w) #numero de errores en este clasificador debil 'm'
alpha[m] <- log((1-err[m])/err[m]) + log( k -1 )  #la GRAN diferencia entre arboles y adaboost
w <- w*exp(alpha[m]* ( diferentes )) #actualizacion de pesos
w <- w/sum(w**2)**.5
}
#if(normalpha)
#   alpha <- alpha/sum(alpha)
result <- list(treelist=treelist,alpha=alpha,weights=w,error=err)
class(result) <- 'boost'
return(invisible(result))
}
predict.boost <- function(bo, x, y, M=length(bo$treelist), verbose=F)
{
newdata <- data.frame(x=x,y=y)
yhat <- rep(-1,nrow(newdata))
k <- length(unique(y))
eval <- rep(-1, k)
cuenta <- 0
votos <- rep(-1,M)
for(j in 1:nrow(newdata)) #para cada observacion estimamos su prediccion
{
if(j%%100==0)
print(j) #para darnos una idea de en que iteracion va
eval <- rep(-1, k)
for(m in 1:M)#evaluamos la observacion en cada arbol
{
votos[m] <- mypred( bo$treelist[[m]], newdata=newdata[j,], weights=bo$weights )
}
for (l in 1:k) #guardamos los resultados de cada clase
{
eval[l] <- sum(bo$alpha*(votos == l))
}
yhat[j] <- which.max(eval) #regresamos la maximo verosimil
}
return(list( class=yhat))
}
############################################################
###################ejemplo rtificial  ###########################
n <- 100
u <- runif(300, 0, 1)
v1 <- max(6 - abs(1:100 - 11), 0)
v2 <- v1*(1:100-4)
v3 <- v1*(1:100+4)
x1 <- u[1:100]*v1+(1-u[1:100])*v2+rnorm(n)
x1 <- data.frame(x =x1, class='1')
x2 <- u[101:200]*v1 + (1-u[101:200])*v3+rnorm(n)
x2 <- data.frame(x=x2, class = '2')
x3 <- u[201:300]*v2+(1-u[201:300])*v3+rnorm(n)
x3 <- data.frame(x = x3, class = '3')
train <- rbind(x1, x2, x3)
y.train <- train$class
train$class <- NULL
set.seed(0)
n <- 1666
u <- runif(n*3, 0, 1)
v1 <- max(6 - abs(1:n - 11), 0)
v2 <- v1*(1:n-4)
v3 <- v1*(1:n+4)
x1 <- u[1:n]*v1+(1-u[1:n])*v2+rnorm(n)
x1 <- data.frame(x =x1, class='1')
x2 <- u[(n+1):2*n]*v1 + (1-u[(n+1):(2*n)])*v3+rnorm(n)
x2 <- data.frame(x=x2, class = '2')
x3 <- u[(2*n+1):(3*n)]*v2+(1-u[(2*n+1):(3*n)])*v3+rnorm(n)
x3 <- data.frame(x = x3, class = '3')
test <- rbind(x1, x2, x3)
y.test <- test$class
test$class <- NULL
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 50)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 200)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 300)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 2, cp = -1, minsplit = 300)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 2, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 3, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 4, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 4, cp = -1, minsplit = 500)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 4, cp = -1, minsplit = 50)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 4, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 4, cp = -1, minsplit = 50)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 7, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 7, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 30)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 15, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
y_hat <- predict.boost(bo = adaboost, x = test, y = y.test)
det(t(as.matrix(train))%*%(as.matrix(train)))
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 40, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 200)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 2)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 4)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 4, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 10, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 5, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 2, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 2, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 10, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 10, cp = -1, minsplit = 200)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 50, cp = -1, minsplit = 200)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 30, cp = -1, minsplit = 200)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 30, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 6000, maxdepth = 30, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 15)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 12)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 11)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 15)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 25)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
0
0
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 9)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 9)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 30)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 25)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 19)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 9)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 2)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 2)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 4)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 6)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 2)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 11, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 2)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 250, cp = -1, minsplit = 3)
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 25, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 6)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 50)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 25)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 15)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 8)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 9)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
y_hat <- predict.boost(bo = adaboost, x = test, y = y.test)
sum(diag(table(y_hat$class, y.test)))/sum(table(y_hat$class, y.test))
y_hat <- predict.boost(bo = adaboost, x = test, y = y.test)
shiny::runApp('MCE_CIMAT/Second/CienciaDeDatos/DWD')
##Lectura de datos y formación d eun solo dataset para hacer cv
###Lectura de datos y formación d eun solo dataset para hacer cv
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/ejercicio2/')
test <- read.table('oef.test')
train <- read.table('oef.train')
data <- rbind(test,train)
data <- readRDS(data, file ='data.rds')
##############################################################33
library(caret)
library(plotly)
library(ggplot2)
library(ripa)
library(parallel)
set.seed(0)
train.ada.init <- function(cv = 10, data, grid)
{
set.seed(0)
library(adabag)
bloque <- round(dim(data)[1]/cv)
breaks <- c(seq(1, dim(data)[1], by = bloque  ), dim(data)[1])
acc.train <- rep(0, cv)
acc.test <- rep(0, cv)
grid <- grid
data$V1 <- factor(data$V1)
function(x){
indices <- sample(1:dim(data)[1], round(dim(data)[1]*.9))
y_hat <- boosting( V1~ ., data= data[-indices,], boos=FALSE,
coeflearn = 'Zhu', mfinal = grid[x, 'mfinal'],
control=rpart.control(
maxdepth= grid[x, 'maxdepth'] ,
minsplit = grid[x, 'minsplit' ], cp =0.01 ) )
y.ouput <-  predict(y_hat, data[-indices, ], type = 'class')
Matrix.C.train <- caret::confusionMatrix( factor(y.ouput$class), factor(data$V1[-indices])) #error de train
Y.test.hat <- predict(y_hat, data[indices,], type = 'class')
res2 <- Y.test.hat
Matrix.C.test <- caret::confusionMatrix( factor(res2$class), factor(data$V1[indices]))
acc.train[x] <- Matrix.C.train$overall['Accuracy']
acc.test[x] <-  Matrix.C.test$overall['Accuracy']
gc()
return( list(train=acc.train, test =acc.test) )
}
}
grid.ada <- data.frame(minsplit = rep(seq(10, 50, by=5),  each = 15 ),
maxdepth = rep(seq(10, 30, by =5 ), each =  27),
mfinal = rep(c(50, 200, 600), 45) )
grid.ada <- unique(grid.ada)
train.ada <- train.ada.init(cv = 10, data = data, grid = grid.ada)
set.seed(0)
train.ada.init <- function(cv = 10, data, grid)
{
set.seed(0)
library(adabag)
bloque <- round(dim(data)[1]/cv)
breaks <- c(seq(1, dim(data)[1], by = bloque  ), dim(data)[1])
acc.train <- rep(0, cv)
acc.test <- rep(0, cv)
grid <- grid
data$V1 <- factor(data$V1)
function(x){
indices <- sample(1:dim(data)[1], round(dim(data)[1]*.9))
y_hat <- boosting( V1~ ., data= data[-indices,], boos=FALSE,
coeflearn = 'Zhu', mfinal = grid[x, 'mfinal'],
control=rpart.control(
maxdepth= grid[x, 'maxdepth'] ,
minsplit = grid[x, 'minsplit' ], cp =0.01 ) )
y.ouput <-  predict(y_hat, data[-indices, ], type = 'class')
Matrix.C.train <- caret::confusionMatrix( factor(y.ouput$class), factor(data$V1[-indices])) #error de train
Y.test.hat <- predict(y_hat, data[indices,], type = 'class')
res2 <- Y.test.hat
Matrix.C.test <- caret::confusionMatrix( factor(res2$class), factor(data$V1[indices]))
acc.train[x] <- Matrix.C.train$overall['Accuracy']
acc.test[x] <-  Matrix.C.test$overall['Accuracy']
gc()
return( list(train=acc.train, test =acc.test) )
}
}
grid.ada <- data.frame(minsplit = rep(seq(10, 50, by=5),  each = 15 ),
maxdepth = rep(seq(10, 30, by =5 ), each =  27),
mfinal = rep(c(50, 200, 600), 45) )
grid.ada <- unique(grid.ada)
train.ada <- train.ada.init(cv = 10, data = data, grid = grid.ada)
searh.grid.ada <- mclapply(FUN = train.ada,  X= 1:dim(grid.ada), mc.cores = (detectCores()-1))
error.ada <- as.data.frame(error.ada)
error.ada unlist(searh.grid.SVM)
error.ada <- unlist(searh.grid.SVM)
error.ada <- unlist(searh.grid.ada)
error.ada <- as.data.frame(error.ada)
error.ada$modelo <- 'ada'
#tuning el arbol
z <- as.data.frame(searh.grid.ada)
searh.grid.ada
error.ada <- unlist(searh.grid.ada)
error.ada
error.ada <- as.data.frame(error.ada)
error.ada
View(error.ada)
searh.grid.ada
error.ada <- unlist(searh.grid.ada)
error.ada <- as.data.frame(error.ada)
error.ada
View(error.ada)
error.ada$modelo <- 'ada'
#tuning el arbol
z <- as.data.frame(searh.grid.ada)
searh.grid.ada
#tuning el arbol
is.na(searh.grid.ada)
#tuning el arbol
is.na(searh.grid.ada)
#tuning el arbol
for(i in searh.grid.ada)
{
print(i)
}
#tuning el arbol
for(i in searh.grid.ada)
{
print(class(i))
}
#tuning el arbol
search <- c()
dat <. searh.grid.ada[1]
dat <- searh.grid.ada[1]
dat
dat[[1]]
dat[[1]]$train
i <- 10
dat[[i]]
dat[i]
searh.grid.ada[1]
searh.grid.ada[10]
searh.grid.ada[10]$train
searh.grid.ada[[10]]
searh.grid.ada[[10]]$train
searh.grid.ada[[39]]$train
is.na(searh.grid.ada[[39]]$train)
searh.grid.ada[[39]]$train[is.na(searh.grid.ada[[39]]$train)] <- 0
is.na(searh.grid.ada[[39]]$train
)
searh.grid.ada[[39]]$train
length(searh.grid.ada))
length(searh.grid.ada)
searh.grid.ada[[39]]
z <- searh.grid.ada
#tuning el arbol
search <- c()
#tuning el arbol
for(i in 1:length(searh.grid.ada))
{
searh.grid.ada[[i]]$train[is.na(searh.grid.ada[[i]]$train)] <- 0
searh.grid.ada[[i]]$test[is.na(searh.grid.ada[[i]]$test)] <- 0
}
searh.grid.ada
error.ada <- unlist(searh.grid.ada)
error.ada <- as.data.frame(error.ada)
error.ada
z
error.ada <- as.data.frame(searh.grid.ada)
View(grid.ada)
gc()
seq(50, 60, by=5)
rep(seq(50, 60, by=5),  each = 15 )
grid.ada <- data.frame(minsplit = rep(seq(50, 60, by=5),  each = 1 ),
maxdepth = rep(seq(60, 40, by =5 ), each =  1),
mfinal = rep(c(600), 45) )
grid.ada <- data.frame(minsplit = rep(seq(50, 60, by=5),  each = 1 ),
maxdepth = rep(seq(60, 40, by =5 ), each =  1),
mfinal = rep(c(600), 1) )
rep(seq(50, 60, by=5),  each = 1 )
rep(seq(60, 40, by =5 ), each =  1)
grid.ada <- data.frame(minsplit = rep(seq(50, 55, by=5),  each = 1 ),
maxdepth = rep(seq(60, 60, by =5 ), each =  1),
mfinal = rep(c(600), 1) )
grid.ada
##Lectura de datos y formación d eun solo dataset para hacer cv
###Lectura de datos y formación d eun solo dataset para hacer cv
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/ejercicio2/')
test <- read.table('oef.test')
train <- read.table('oef.train')
data <- rbind(test,train)
data <- readRDS(data, file ='data.rds')
##############################################################33
library(caret)
library(plotly)
library(ggplot2)
library(ripa)
library(parallel)
set.seed(0)
train.ada.init <- function(cv = 10, data, grid)
{
set.seed(0)
library(adabag)
bloque <- round(dim(data)[1]/cv)
breaks <- c(seq(1, dim(data)[1], by = bloque  ), dim(data)[1])
acc.train <- rep(0, cv)
acc.test <- rep(0, cv)
grid <- grid
data$V1 <- factor(data$V1)
function(x){
indices <- sample(1:dim(data)[1], round(dim(data)[1]*.9))
y_hat <- boosting( V1~ ., data= data[-indices,], boos=FALSE,
coeflearn = 'Zhu', mfinal = grid[x, 'mfinal'],
control=rpart.control(
maxdepth= grid[x, 'maxdepth'] ,
minsplit = grid[x, 'minsplit' ], cp =0.01 ) )
y.ouput <-  predict(y_hat, data[-indices, ], type = 'class')
Matrix.C.train <- caret::confusionMatrix( factor(y.ouput$class), factor(data$V1[-indices])) #error de train
Y.test.hat <- predict(y_hat, data[indices,], type = 'class')
res2 <- Y.test.hat
Matrix.C.test <- caret::confusionMatrix( factor(res2$class), factor(data$V1[indices]))
acc.train[x] <- Matrix.C.train$overall['Accuracy']
acc.test[x] <-  Matrix.C.test$overall['Accuracy']
gc()
return( list(train=acc.train, test =acc.test) )
}
}
grid.ada <- data.frame(minsplit = rep(seq(50, 55, by=5),  each = 1 ),
maxdepth = rep(seq(60, 60, by =5 ), each =  1),
mfinal = rep(c(100), 1) )
grid.ada <- unique(grid.ada)
grid.ada
train.ada <- train.ada.init(cv = 10, data = data, grid = grid.ada)
searh.grid.ada <- mclapply(FUN = train.ada,  X= 1:dim(grid.ada), mc.cores = (detectCores()-1))
grid.ada
searh.grid.ada <- mclapply(FUN = train.ada,  X= 1:dim(grid.ada)[1], mc.cores = (detectCores()-1))
1:dim(grid.ada)[1]
