}
n <- 100
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte)
}
warnings()
n <- 10
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte)
}
Splin <- function(punto){
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
###frontera libre
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in (n-1):1)
{
b[i] = (1/h[i])*(a[i+1] - a[i])-(h[i]/3)*(c[i+1]+5*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
return(res)
}
n <- 10
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte)
}
n <- 100
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte)
}
punto <- soporte[5]
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
View(M)
c <- solve(M, F)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in (n-1):1)
{
b[i] = (1/h[i])*(a[i+1] - a[i])-(h[i]/3)*(c[i+1]+5*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
Splin <- function(punto){
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
###frontera libre
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in (n-1):1)
{
b[i] = (1/h[i])*(a[i+1] - a[i])-(h[i]/3)*(c[i+1]+5*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
return(res)
}
n <- 100
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte[i])
}
punto <- soporte[5]
n <- 10
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte[i])
}
n <- 100
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte[i])
}
points(soporte, f_spline, col = 'green', type ='l')
n <- 1000
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte[i])
}
points(soporte, f_spline, col = 'green', type ='l')
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
Splin(x[1])
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x) #j:1,(n-1)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in 1:(n-1))
{
b[i] = (1/h[i])*(a[i+1] - a[i]) - (h[i]/3)*(c[i+1]+2*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
punto = 4.2
indice <- which( punto < x )[1]
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
res
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
Splin(x[1])
Splin <- function(punto){
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x) #j:1,(n-1)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
###frontera libre
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in 1:(n-1))
{
b[i] = (1/h[i])*(a[i+1] - a[i]) - (h[i]/3)*(c[i+1]+2*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
return(res)
}
punto = 4.2
n <- 1000
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte[i])
}
Splin <- function(punto){
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x) #j:1,(n-1)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
###frontera libre
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in 1:(n-1))
{
b[i] = (1/h[i])*(a[i+1] - a[i]) - (h[i]/3)*(c[i+1]+2*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
return(res)
}
n <- 100
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte[i])
}
points(soporte, f_spline, col = 'green', type ='l')
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
Splin(x[1])
Splin(x[2])
points(soporte, f_spline, col = 'green', type ='l')
Splin(x[2])
Splin(x[3])
Splin(x[4])
Splin(x[5])
points(soporte, f_spline, col = 'green', type ='l')
Splin <- function(punto){
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x) #j:1,(n-1)
a <- y
t <- (3 / h[(n-1):2] )*(a[ n:3 ] - a[ (n-1):2]) - (3/ h[(n-2):1] )*(a[ (n-1):2] -  a[ (n-2):1] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
###frontera libre
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in 1:(n-1))
{
b[i] = (1/h[i])*(a[i+1] - a[i]) - (h[i]/3)*(c[i+1]+2*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
return(res)
}
n <- 100
soporte <- seq(0, 10, length=n)
f_spline <- vector(mode='numeric', length=n)
for(i in 1:n)
{
f_spline[i] <- Splin(soporte[i])
}
points(soporte, f_spline, col = 'green', type ='l')
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
Splin(x[5])
Splin(x[4])
points(soporte, f_spline, col = 'green', type ='l')
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- diff(x) #j:1,(n-1)
a <- y
h <- x[n:2] - x[(n-1):1] #j:1,(n-1)
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- x[n:2] - x[(n-1):1] #j:1,(n-1)
a <- y
?splinefun
splinefun
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
Splin(x[4])
punto <- Splin(x[1])
punto <- x[1]
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
punto <- x[1]
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- x[n:2] - x[(n-1):1] #j:1,(n-1)
x <- c(0, .5, 1, 1.5, 1.8, 3, 5)
n z- length(x)
x <- c(0, .5, 1, 1.5, 1.8, 3, 5)
n z- length(x)
n <- length(x)
x <- c(0, .5, 1, 1.5, 1.8, 3, 5)
n <- length(x)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- x[n:2] - x[(n-1):1] #j:1,(n-1)
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
punto <- x[1]
x <- c(0, .5, 1, 1.5, 1.8, 3, 5)
n <- length(x)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- x[n:2] - x[(n-1):1] #j:1,(n-1)
h <- x[2:n] - x[1:(n-1)] #j:1,(n-1)
a <- y
x <- c(0, .5, 1, 1.5, 1.8, 3, 5)
n <- length(x)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- x[2:n] - x[1:(n-1)] #j:1,(n-1)
a <- y
x[2:n]
x[1:(n-1)]
t <- (3 / h[2:(n-1)] )*(a[ 3:n ] - a[ 2:(n-1) ]) - (3/ h[1:(n-2)] )*(a[ 2:(n-1) ] -  a[ 1:(n-2) ] )
a[ 3:n ] - a[ 2:(n-1) ]
t <- (3 / h[2:(n-1)] )*(a[ 3:n ] - a[ 2:(n-1) ]) - (3/ h[1:(n-2)] )*(a[ 2:(n-1) ] -  a[ 1:(n-2) ] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
View(M)
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
View(M)
F <- c(0, t, 0)
c <- solve(M, F)
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in 1:(n-1))
{
b[i] = (1/h[i])*(a[i+1] - a[i]) - (h[i]/3)*(c[i+1]+2*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto < x )[1]
punto < x
indice <- which( punto > x )[1]
punto > x
which( punto > x )
indice <- which( punto <= x )[1]
punto <= x
indice <- which( punto <= x )[1]
indice
a[indice]
b[indice]*(punto - x[indice])
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
res
res
n <- 10
x <- seq(0,10, length=n)
y <- sin(x)
punto <- x[2]
n <- 10
x <- seq(0,10, length=n)
x
x <- c(0, .5, 1, 1.5, 1.8, 3, 5)
n <- length(x)
y <- sin(x)
plot(x,y, pch = 20, col = 'red')
points(seq(0,10,.1), sin(seq(0,10,.1)), type='l', col='blue' )
h <- x[2:n] - x[1:(n-1)] #j:1,(n-1)
a <- y
t <- (3 / h[2:(n-1)] )*(a[ 3:n ] - a[ 2:(n-1) ]) - (3/ h[1:(n-2)] )*(a[ 2:(n-1) ] -  a[ 1:(n-2) ] )
M <- matrix( rep(0, (n-2)*(n)), nrow = n-2   )
for (i in 1:(n-2))
{
M[i, c(i, i+1 , i+2 ) ] <-  c(h[i], 2*(h[i]+h[i+1]), h[i+1])
}
M1 <- matrix( c(1, rep(0, n-1)), nrow = 1)
Mn <- matrix( c(rep(0, n-1), 1), nrow = 1)
M <- rbind(M1, M, Mn)
F <- c(0, t, 0)
c <- solve(M, F)
c
b <- matrix( rep(0, n-1), nrow = 1)
d <- matrix( rep(0, n-1), nrow = 1)
for (i in 1:(n-1))
{
b[i] = (1/h[i])*(a[i+1] - a[i]) - (h[i]/3)*(c[i+1]+2*c[i])
d[i] = (c[i+1] - c[i])/(3*h[i])
}
indice <- which( punto <= x )[1]
x
x
punto
indice
x
punto
indice <- which( punto <= x )[1] - 1
res <- a[indice] + b[indice]*(punto - x[indice])+ c[indice]*(punto - x[indice])**2 +
d[indice]*(punto - x[indice])**3
sin(punto)
?prcomp
prcomp
getMethod("prcomp")
methods(prcomp)
getAnywhere(prcomp.default)
methods(princomp())
methods(princomp
)
getAnywhere(princomp.default)
shiny::runApp('C:/Users/fou-f/Desktop/MCE/Second/CienciaDeDatos/tarea1/ejercicio4')
runApp('C:/Users/fou-f/Desktop/MCE/Second/CienciaDeDatos/tarea1/ejercicio4')
runApp('C:/Users/fou-f/Desktop/MCE/Second/CienciaDeDatos/tarea1/ejercicio4')
