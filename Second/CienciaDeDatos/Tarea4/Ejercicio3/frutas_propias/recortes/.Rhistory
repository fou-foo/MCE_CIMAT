plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 2)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 5)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 11, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 2)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 250, cp = -1, minsplit = 3)
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 25, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 6)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 5, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 20)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 1, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 100)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 50)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 25)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 15)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 10, cp = -1, minsplit = 8)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 30, cp = -1, minsplit = 10)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 20, cp = -1, minsplit = 9)
plot(adaboost$error, type = 'l')
adaboost <- boost(x = train, y = y.train , M = 600, maxdepth = 12, cp = -1, minsplit = 3)
plot(adaboost$error, type = 'l')
y_hat <- predict.boost(bo = adaboost, x = test, y = y.test)
sum(diag(table(y_hat$class, y.test)))/sum(table(y_hat$class, y.test))
y_hat <- predict.boost(bo = adaboost, x = test, y = y.test)
shiny::runApp('MCE_CIMAT/Second/CienciaDeDatos/DWD')
library("Rcpp", lib.loc="/usr/local/lib/R/site-library")
remove.packages("Rcpp", lib="/usr/local/lib/R/site-library")
remove.packages("Rcpp", lib="/usr/local/lib/R/site-library")
remove.packages("Rcpp", lib="/usr/local/lib/R/site-library")
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
t1 <- Sys.time() #medimos tiempo de ejecucion
imagenes <- dir()
i <- imagenes[1]
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
#M <- (M -min(M))/(max(M)-min(M))
sig <- 1
siz <- var(as.vector((M)))
(h <- dim(M)[2])
(w <- dim(M)[1] )
hist(as.matrix(M))
plot(as.cimg(M))
hist(as.matrix(M))
meadian(M)
median(M)
mean(M)
median(M) -mean(M)
M[1,1]
M[100,1]
kapa <- M
indices <- M<=median(M)
kapa[indices] <- 0
plot(as.cimg(kapa))
kapa <- M
indices <- M<=median(M)
indices <- M>median(M)
kapa[indices] <- 0
plot(as.cimg(kapa))
median(M)+mean(M)
indices <- M> (median(M)+mean(M))
kapa[indices] <- 0
plot(as.cimg(kapa))
length(M)
kapa <- M
indices <- M> (median(M)+mean(M)/length(M))
kapa[indices] <- 0
plot(as.cimg(kapa))
kapa <- M
indices <- M> (median(M)+mean(M)/var())
kapa <- M
indices <- M> (median(M)+mean(M)/var())
var(as.vector(M))
indices <- M> (median(M)+mean(M)/var(as.vector(M)))
(median(M)+mean(M)/var(as.vector(M)))
kapa <- M
indices <- M> (median(M)+var(as.vector(M)))
kapa[indices] <- 0
plot(as.cimg(kapa))
kapa <- M
indices <- M> (median(M)+2*var(as.vector(M)))
kapa[indices] <- 0
plot(as.cimg(kapa))
var(as.vector(M))
kapa <- M
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[indices] <- 0
plot(as.cimg(kapa))
kapa <- M
indices <- M> (median(M)+2*(var(as.vector(M)))**.5)
kapa[indices] <- 0
plot(as.cimg(kapa))
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[indices] <- 0
plot(as.cimg(kapa))
kapa <- M
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[indices] <- 0
plot(as.cimg(kapa))
hist(as.matrix(M))
plot(as.cimg(kapa))
kapa[indices] <- 0
plot(as.cimg(kapa))
hist(as.matrix(M))
#####################
mascara <- kapa
mascara <- matrix(mascara, ncol = h, byrow = TRUE)
g()
gc()
segmentacion <- mascara
table(segmentacion)
kapa <- matrix(rep(0,100*100), ncol=100)
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[indices] <- 0
kapa <- matrix(rep(0,100*100), ncol=100)
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[-indices] <- 1
plot(as.cimg(kapa))
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
imagenes <- dir()
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
t1 <- Sys.time() #medimos tiempo de ejecucion
imagenes <- dir()
dir()
i <- imagenes[1]
i
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
M <- (M -min(M))/(max(M)-min(M))
sig <- 1
siz <- var(as.vector((M)))
(h <- dim(M)[2])
(w <- dim(M)[1] )
kapa <- matrix(rep(0,100*100), ncol=100)
hist(M)
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
t1 <- Sys.time() #medimos tiempo de ejecucion
imagenes <- dir()
i <- imagenes[1]
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
M <- (M -min(M))/(max(M)-min(M)) #aumentamos el contraste
sig <- 1
siz <- var(as.vector((M)))
(h <- dim(M)[2])
(w <- dim(M)[1] )
(h <- dim(M)[2])
(w <- dim(M)[1] )
hist(M)
kapa <- matrix(rep(0,100*100), ncol=100)
(median(M)+(var(as.vector(M)))**.5)
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[-indices] <- 1
plot(as.cimg(kapa))
kapa <- matrix(rep(0,100*100), ncol=100)
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[-indices] <- 0
plot(as.cimg(kapa))
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
t1 <- Sys.time() #medimos tiempo de ejecucion
imagenes <- dir()
i <- imagenes[1]
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
#M <- (M -min(M))/(max(M)-min(M)) #aumentamos el contraste
(h <- dim(M)[2])
(w <- dim(M)[1] )
hist(M)
kapa <- matrix(rep(0,100*100), ncol=100)
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[-indices] <- 0
plot(as.cimg(kapa))
#####################
mascara <- kapa
kapa <- M
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[-indices] <- 0
plot(as.cimg(kapa))
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
#M <- (M -min(M))/(max(M)-min(M)) #aumentamos el contraste
(h <- dim(M)[2])
(w <- dim(M)[1] )
hist(M)
kapa <- M
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[-indices] <- 0
plot(as.cimg(kapa))
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
t1 <- Sys.time() #medimos tiempo de ejecucion
imagenes <- dir()
i <- imagenes[1]
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
plot(as.cimg(gray.imagen))
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
#M <- (M -min(M))/(max(M)-min(M)) #aumentamos el contraste
(h <- dim(M)[2])
(w <- dim(M)[1] )
hist(M)
kapa <- M
median(M)
(median(M)+(var(as.vector(M)))**.5)
indices <- M> (median(M)+(var(as.vector(M)))**.5)
kapa[indices] <- 1
plot(as.cimg(kapa))
kapa[indices] <- 0
plot(as.cimg(kapa))
#####################
mascara <- kapa
indices <- M > (median(M)+(var(as.vector(M)))**.5)
kapa
hist(kapa)
indices <- M > (median(M)+(var(as.vector(M)))**.5)
hist(indices)
table(indices)
indices <- M > (median(M)+(var(as.vector(M)))**.5)
M*indices
mascara z- indices
mascara <- indices
plot(as.cimg(indices))
table(indices)
indices <- M < (median(M)+(var(as.vector(M)))**.5)
mascara <- indices
plot(as.cimg(indices))
indices <- M <= (median(M)+(var(as.vector(M)))**.5)
mascara <- indices
plot(as.cimg(indices))
#####################
mascara <- indices
gc()
Aplica.Mascara <- function( canal){
M1 <- imagen[,,canal]
M1 <- as.matrix(M1)*mascara
return((M1))
}
M <- lapply( FUN = Aplica.Mascara, X=1:3)
Aplica.Mascara <- function( x){
M1 <- imagen[,,1 , x]
M1 <- as.matrix(M1)*mascara
return((M1))
}
M <- lapply( FUN = Aplica.Mascara, X=1:3)
library(abind)
M <- abind(M , along = 3)
imagen.final <- as.cimg(M)
plot(imagen.final)#CON MADRE
save.image(imagen.final, file = name)
library(abind)
M <- abind(M , along = 3)
imagen.final <- as.cimg(M)
r <- imagen.final[,,1] == 0
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
t1 <- Sys.time() #medimos tiempo de ejecucion
imagenes <- dir()
i <- imagenes[1]
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
plot(as.cimg(gray.imagen))
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
#M <- (M -min(M))/(max(M)-min(M)) #aumentamos el contraste
(h <- dim(M)[2])
(w <- dim(M)[1] )
hist(M)
kapa <- M
indices <- M <= (median(M)+(var(as.vector(M)))**.5)
mascara <- indices
plot(as.cimg(indices))
#####################
mascara <- indices
gc()
Aplica.Mascara <- function( x){
M1 <- imagen[,,1 , x]
M1 <- as.matrix(M1)*mascara
return((M1))
}
M <- lapply( FUN = Aplica.Mascara, X=1:3)
library(abind)
M <- abind(M , along = 3)
imagen.final <- as.cimg(M)
r <- imagen.final[,,1] == 0
imagen.final[,,1][r] <- 1
g <- imagen.final[,,2] == 0
imagen.final[,,1][g] <- 1
b <- imagen.final[,,3] == 0
imagen.final[,,1][b] <- 1
plot(imagen.final)#CON MADRE
M <- lapply( FUN = Aplica.Mascara, X=1:3)
library(abind)
M <- abind(M , along = 3)
imagen.final <- as.cimg(M)
r <- imagen.final[,,1] == 0
imagen.final[,,1][r] <- 1
g <- imagen.final[,,2] == 0
imagen.final[,,2][g] <- 1
b <- imagen.final[,,3] == 0
imagen.final[,,3][b] <- 1
plot(imagen.final)#CON MADRE
setwd('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/recortes')
path.escritura <- '/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/frutas_propias/segmentacion/'
library(RcppEigen) #libreria para codigo c++
library(RSpectra) #libreria para lanczos
library(imager) #libreria para leer imagenes
library(Matrix)
library(RcppArmadillo)
library(Rcpp) #libreria para codigo c++
sourceCpp('/home/fou/Desktop/MCE_CIMAT/Second/CienciaDeDatos/Tarea4/Ejercicio3/W_float.cpp') #compilamos el programa en C++
t1 <- Sys.time() #medimos tiempo de ejecucion
imagenes <- dir()
i <- imagenes[1]
for(i in imagenes)
{
name <- paste0(path.escritura, paste0('seg_',i))
imagen <- load.image(i)
dim(imagen)
plot(imagen) #visualizamos la imagen
#############preprosesamiento  160*120 jala bien, recortamos la imaagen para que quepa en memoria
gray.imagen <- grayscale(imagen) #cambiamos a escala de grises
dim(gray.imagen) #verificamos tamanio de la imagen
#remove(imagen) #removemos del ambiente la imagen original para ahorra memoria
gc()
plot(as.cimg(gray.imagen))
#estandarizacion escala de grises
M <- as.matrix(gray.imagen)
#M <- (M -min(M))/(max(M)-min(M)) #aumentamos el contraste
(h <- dim(M)[2])
(w <- dim(M)[1] )
hist(M)
kapa <- M
indices <- M <= (median(M)+(var(as.vector(M)))**.5)
mascara <- indices
plot(as.cimg(indices))
#####################
mascara <- indices
gc()
Aplica.Mascara <- function( x){
M1 <- imagen[,,1 , x]
M1 <- as.matrix(M1)*mascara
return((M1))
}
M <- lapply( FUN = Aplica.Mascara, X=1:3)
library(abind)
M <- abind(M , along = 3)
imagen.final <- as.cimg(M)
r <- imagen.final[,,1] == 0
imagen.final[,,1][r] <- 1
g <- imagen.final[,,2] == 0
imagen.final[,,2][g] <- 1
b <- imagen.final[,,3] == 0
imagen.final[,,3][b] <- 1
plot(imagen.final)#CON MADRE
save.image(imagen.final, file = name)
}
